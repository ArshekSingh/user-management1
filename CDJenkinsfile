pipeline {
    agent any
    environment {
    AWS_ACCOUNT_ID='973152351290'
    AWS_DEFAULT_REGION='ap-south-1'
    app='${App}'
    IMAGE_REPO_NAME='non-prod-svcl-finncub-${app}-service'
    IMAGE_TAG='${ImageNumber}'
    ECR_ACCOUNT='${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com'
    REPOSITORY_URI = '${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_REPO_NAME}'
    }
    
    stages{
        stage('Clone Repo') {
            steps {
				checkout([$class: 'GitSCM', branches: [[name: '*/master']],
				doGenerateSubmoduleConfigurations: true, extensions: [],
				submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'BItBucket_devops_admin',
				url: 'https://SasDevOpsAdmin@bitbucket.org/finstudio/infrastructure-as-code.git']]])
                }
            }
        stage('deploy') {
            steps{
                script {
                    sh '''
                    #!/bin/bash
                    cd "./resources/ECS/"
                    git config --local user.name "Jenkins.server"
                    git config --local user.email "Jenkins.server@finncub.com"
                    IMAGE_WITH_OLD_TAG=$(grep "${IMAGE_REPO_NAME}" terraform.tfvars | awk -F"/" '{print $2}' | awk -F'"' '{print $1}')
                    IMAGE_WITH_NEW_TAG="${IMAGE_REPO_NAME}:${IMAGE_TAG}"
                    sed -i "s/${ECR_ACCOUNT}\/${IMAGE_WITH_OLD_TAG}/${ECR_ACCOUNT}\/${IMAGE_WITH_NEW_TAG}/"
                    git add -A
                    git commit -m "Updated the image tag of ${IMAGE_REPO_NAME} to ${IMAGE_TAG}"
                    git push -u origin master
                    terraform apply --auto-approve
                    '''.stripIndent()
                }
            }
        }
        stage('Service check')
        {
            steps{
                script {
                    sh 'export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}'
                    sh 'export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}'
                    sh 'export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}'
                    sh 'sudo chmod +x statushealth.sh'
                    sleep 60
                    sh './statushealth.sh ${env}-${app} ${cluster_name}'
                }
            }
        }
    }
    post {
        always {
            script {
                if (currentBuild.currentResult == 'SUCCESS') {
                    emailext subject: '$PROJECT_NAME - Build # $BUILD_NUMBER - SUCCESS!!!',
                    body: '$DEFAULT_CONTENT',
                    recipientProviders: [
                    [$class: 'RequesterRecipientProvider']
                    ],
                    replyTo: '$DEFAULT_REPLYTO',
                    to: 'finncub.dev@sastechstudio.com'
                }
                if (currentBuild.currentResult == 'FAILURE') {
                    emailext subject: '$PROJECT_NAME - Build # $BUILD_NUMBER - FAILED!!!',
                    body: '$DEFAULT_CONTENT',
                    recipientProviders: [
                    [$class: 'RequesterRecipientProvider']
                    ],
                    replyTo: '$DEFAULT_REPLYTO',
                    to: 'finncub.dev@sastechstudio.com'
                }
            }
        }
    }
}    
